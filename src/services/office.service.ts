import { Injectable, signal, inject } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { tap, catchError, of } from 'rxjs';
import { env } from '../env/env.dev';

export interface Office {
    id: number;             // Office ID in the system
    name: string;           // Office name
    externalId?: string;    // External unique identifier
    parentId?: number;      // Parent office ID
    hierarchy?: string;     // Office hierarchy, generated by the system
    dateFormat?: string;    // Date format, for example, "dd MMMM yyyy"
    locale?: string;        // Locale, for example, "en"
    openingDate?: string;   // Opening date, format "YYYY-MM-DD"
}

@Injectable({ providedIn: 'root' })
export class OfficesService {
    private http = inject(HttpClient);
    private baseUrl = `${env.apiBase}/offices`;

    // Signals
    offices = signal<Office[]>([]);
    loading = signal(false);
    error = signal<string | null>(null);

    // fetch offices by params
    private fetchOffices(params?: {
        fields?: string;
        orderBy?: string;
        sortOrder?: 'ASC' | 'DESC';
        includeAllOffices?: boolean;
    }) {
        this.loading.set(true);

        let httpParams = new HttpParams();

        if (params) {
            Object.entries(params).forEach(([k, v]) => {
                if (v !== null) httpParams = httpParams.set(k, v.toString());
            });
        }

        this.http.get<Office[]>(this.baseUrl, { params: httpParams })
            .pipe(
                tap(list => this.offices.set(list)),
                catchError(err => {
                    this.error.set(err.message || 'Failed to load offices');
                    return of([]);
                }),
                tap(() => this.loading.set(false))
            ).subscribe();
    }

    // Get all offices list
    getOffices(params?: {
        fields?: string;
        orderBy?: string;
        sortOrder?: 'ASC' | 'DESC';
        includeAllOffices?: boolean
    }) {
        this.fetchOffices(params);
    }

    // Get office by ID
    getOffice(officeId: number) {
        return this.http.get<Office>(`${this.baseUrl}/${officeId}`);
    }

    // Create new office
    createOffice(office: Partial<Office>) {
        return this.http.post<Office>(this.baseUrl, office).pipe(
            tap(() => this.fetchOffices())
        );
    }

    // Update office by ID
    updateOffice(officeId: number, office: Partial<Office>) {
        return this.http.put<Office>(`${this.baseUrl}/${officeId}`, office).pipe(
            tap(() => this.fetchOffices())
        );
    }

    // Delete office by ID
    deleteOffice(officeId: number) {
        return this.http.delete<void>(`${this.baseUrl}/${officeId}`).pipe(
            tap(() => this.fetchOffices())
        );
    }


    // Template methods
    // Get office template
    getTemplate() {
        return this.http.get<Office>(`${this.baseUrl}/template`);
    }

    // Upload office template
    uploadTemplate(file: File) {
        const formData = new FormData();
        formData.append('file', file);
        return this.http.post<void>(`${this.baseUrl}/uploadtemplate`, formData).pipe(
            tap(() => this.fetchOffices())
        );
    }


    // External ID methods
    // Get an office using an external ID
    getByExternalId(externalId: string) {
        return this.http.get<Office>(`${this.baseUrl}/external-id/${externalId}`);
    }

    // Update an office using an external ID
    updateByExternalId(externalId: string, office: Partial<Office>) {
        return this.http.put<Office>(`${this.baseUrl}/external-id/${externalId}`, office).pipe(
            tap(() => this.fetchOffices())
        );
    }
}
