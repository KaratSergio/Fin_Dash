import { Injectable, signal, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { env } from '../env/env.dev';
import { tap } from 'rxjs/operators';
import { Observable } from 'rxjs';

export interface Office {
    id: number;             // Office ID in the system
    name: string;           // Office name
    externalId?: string;    // External unique identifier
    parentId?: number;      // Parent office ID
    hierarchy?: string;     // Office hierarchy, generated by the system
    dateFormat?: string;    // Date format, for example, "dd MMMM yyyy"
    locale?: string;        // Locale, for example, "en"
    openingDate?: string;   // Opening date, format "YYYY-MM-DD"
}

@Injectable({ providedIn: 'root' })
export class OfficesService {
    private http = inject(HttpClient);

    offices = signal<Office[]>([]);
    loading = signal(false);

    // Get all offices list
    getOffices(): Observable<Office[]> {
        this.loading.set(true);
        return this.http.get<Office[]>(`${env.apiBase}/offices`).pipe(
            tap({
                next: (list) => this.offices.set(list),
                complete: () => this.loading.set(false),
            })
        );
    }

    // Get office by ID
    getOffice(officeId: number): Observable<Office> {
        return this.http.get<Office>(`${env.apiBase}/offices/${officeId}`);
    }

    // Create new office
    createOffice(office: Partial<Office>): Observable<Office> {
        return this.http.post<Office>(`${env.apiBase}/offices`, office).pipe(
            tap(() => this.getOffices())
        );
    }

    // Update office by ID
    updateOffice(officeId: number, office: Partial<Office>): Observable<Office> {
        return this.http.put<Office>(`${env.apiBase}/offices/${officeId}`, office).pipe(
            tap(() => this.getOffices())
        );
    }

    // Get office template
    getTemplate(): Observable<Office> {
        return this.http.get<Office>(`${env.apiBase}/offices/template`);
    }

    // Upload office template
    uploadTemplate(file: File): Observable<void> {
        const formData = new FormData();
        formData.append('file', file);
        return this.http.post<void>(`${env.apiBase}/offices/uploadtemplate`, formData).pipe(
            tap(() => this.getOffices())
        );
    }

    // Get an office using an external ID
    getByExternalId(externalId: string): Observable<Office> {
        return this.http.get<Office>(`${env.apiBase}/offices/external-id/${externalId}`);
    }

    // Update an office using an external ID
    updateByExternalId(externalId: string, office: Partial<Office>): Observable<Office> {
        return this.http.put<Office>(`${env.apiBase}/offices/external-id/${externalId}`, office).pipe(
            tap(() => this.getOffices())
        );
    }
}
